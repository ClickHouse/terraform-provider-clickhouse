name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: "The semver formatted version for the new release i.e 0.3.1"
      test_upgrade:
        type: boolean
        required: false
        default: true
        description: "Additionally run upgrade test from latest stable version of the plugin to the one being released"

defaults:
  run:
    shell: bash

jobs:
  # Validate the input
  validate:
    runs-on: ubuntu-latest
    outputs:
      enable_alpha: ${{ steps.check.outputs.enable_alpha }}
      goreleaser_config: ${{ steps.check.outputs.goreleaser_config }}
    steps:
      - name: Check input
        id: check
        run: |
          version="${{ inputs.version }}"
          enable_alpha=""
          goreleaser_config=""

          # validate semver.
          if [[ $version =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$ ]]; then
            echo "Valid release version: $version"
          
            if [[ $version =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$ ]]; then
              # Release is something like x.y.z
              enable_alpha="false"
              goreleaser_config=".goreleaser-stable.yml"
            else
              # Release is something like x.y.z-something
              enable_alpha="true"
              goreleaser_config=".goreleaser-alpha.yml"
            fi
          else
            echo "Invalid semver: \"$version\". Must be something like 1.2.3 without leading \"v\""
            exit 1
          fi
          
          echo "enable_alpha=${enable_alpha}" >> $GITHUB_OUTPUT
          echo "goreleaser_config=${goreleaser_config}" >> $GITHUB_OUTPUT

  # Generate a random token to tag the tests with
  token:
    needs: ["validate"]
    outputs:
      token: ${{ steps.generate.outputs.token }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate
        id: generate
        run: |
          token="$(date '+%s')"
          echo "token=${token}" >> $GITHUB_OUTPUT

  # Find the 3 most recent releases of terraform CLI (one for each minor)
  find-tf-releases:
    needs: ["validate"]
    outputs:
      releases: ${{ steps.find.outputs.releases }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/find-tf-releases
        id: find

  # List examples split by cloud provider as a JSON
  list-examples:
    needs: ["validate"]
    outputs:
      examples: ${{ steps.list.outputs.examples }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/list-examples
        id: list

  # Run e2e tests
  e2e:
    outputs:
      status: ${{ steps.status.outputs.status }}
    needs: [ "validate", "token", "find-tf-releases", "list-examples" ]
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        tf_release: ${{ fromJSON(needs.find-tf-releases.outputs.releases) }}
        test: ${{ fromJSON(needs.list-examples.outputs.examples) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get API details for env
        id: credentials
        env:
          api_env: "Production"
          api_env_production: "${{ secrets.API_ENV_PRODUCTION }}"
          api_env_staging: "${{ secrets.API_ENV_STAGING }}"
          api_env_development: "${{ secrets.API_ENV_DEVELOPMENT }}"
        run: |
          bash ./.github/scripts/set_api_env.sh ${{ matrix.test.cloud }}

      - name: e2e
        uses: ./.github/actions/e2e
        with:
          api_url: ${{ steps.credentials.outputs.api_url }}
          organization_id: ${{ steps.credentials.outputs.organization_id }}
          token_key: ${{ steps.credentials.outputs.api_key_id }}
          token_secret: ${{ steps.credentials.outputs.api_key_secret }}
          service_name: "[e2e]-${{ matrix.test.name }}-${{ matrix.tf_release }}-${{ matrix.test.cloud }}-${{ needs.token.outputs.token }}"
          test_name: ${{ matrix.test.name }}
          tf_release: ${{ matrix.tf_release }}
          cloud_provider: ${{ matrix.test.cloud }}
          upgrade_test: "false"
          region: ${{ steps.credentials.outputs.region }}
          aws_role_arn: ${{ secrets.AWS_ASSUME_ROLE_ARN }}

      - name: Mark error
        id: status
        if: failure()
        run: |
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1

  # Run e2e tests
  upgrade:
    outputs:
      status: ${{ steps.status.outputs.status }}
    needs: [ "validate", "token", "find-tf-releases", "list-examples" ]
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        tf_release: ${{ fromJSON(needs.find-tf-releases.outputs.releases) }}
        test: ${{ fromJSON(needs.list-examples.outputs.examples) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get API details for env
        id: credentials
        env:
          api_env: "Production"
          api_env_production: "${{ secrets.API_ENV_PRODUCTION }}"
          api_env_staging: "${{ secrets.API_ENV_STAGING }}"
          api_env_development: "${{ secrets.API_ENV_DEVELOPMENT }}"
        run: |
          bash ./.github/scripts/set_api_env.sh ${{ matrix.test.cloud }}

      - name: upgrade
        if: ${{inputs.test_upgrade }}
        uses: ./.github/actions/e2e
        with:
          api_url: ${{ steps.credentials.outputs.api_url }}
          organization_id: ${{ steps.credentials.outputs.organization_id }}
          token_key: ${{ steps.credentials.outputs.api_key_id }}
          token_secret: ${{ steps.credentials.outputs.api_key_secret }}
          service_name: "[upgrade]-${{ matrix.test.name }}-${{ matrix.tf_release }}-${{ matrix.test.cloud }}-${{ needs.token.outputs.token }}"
          test_name: ${{ matrix.test.name }}
          tf_release: ${{ matrix.tf_release }}
          cloud_provider: ${{ matrix.test.cloud }}
          upgrade_test: "true"
          region: ${{ steps.credentials.outputs.region }}
          aws_role_arn: ${{ secrets.AWS_ASSUME_ROLE_ARN }}

      - name: Mark error
        id: status
        if: failure()
        run: |
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1

  # Run import tests
  import:
    outputs:
      status: ${{ steps.status.outputs.status }}
    needs: [ "token", "find-tf-releases" ]
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        tf_release: ${{ fromJSON(needs.find-tf-releases.outputs.releases) }}
        cloud_provider: [ "aws", "azure", "gcp" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get API details for env
        id: credentials
        env:
          api_env: "Production"
          api_env_production: "${{ secrets.API_ENV_PRODUCTION }}"
          api_env_staging: "${{ secrets.API_ENV_STAGING }}"
          api_env_development: "${{ secrets.API_ENV_DEVELOPMENT }}"
        run: |
          bash ./.github/scripts/set_api_env.sh ${{ matrix.cloud_provider }}

      - name: import
        id: import
        uses: ./.github/actions/import
        with:
          api_url: ${{ steps.credentials.outputs.api_url }}
          organization_id: ${{ steps.credentials.outputs.organization_id }}
          token_key: ${{ steps.credentials.outputs.api_key_id }}
          token_secret: ${{ steps.credentials.outputs.api_key_secret }}
          resource_name: "[import]-${{ matrix.tf_release }}-${{ matrix.cloud_provider }}-${{ needs.token.outputs.token }}"
          tf_release: ${{ matrix.tf_release }}
          cloud_provider: ${{ matrix.cloud_provider }}
          region: ${{ steps.credentials.outputs.region }}

      - name: Mark error
        id: status
        if: failure()
        run: |
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1

  report:
    runs-on: ubuntu-latest
    needs: [ "e2e", "import", "upgrade" ]
    if: ${{ needs.e2e.outputs.status == 'failure' || needs.import.outputs.status == 'failure' || needs.upgrade.outputs.status == 'failure' }}
    steps:
      - name: Report Failure on slack
        uses: ravsamhq/notify-slack-action@v2
        if: ${{ needs.e2e.outputs.status == 'failure' || needs.import.outputs.status == 'failure' || needs.upgrade.outputs.status == 'failure' }}
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          status: 'failure'
          notification_title: "E2E tests failed for {branch}"
          footer: "{run_url}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      - name: Report error on github UI
        if: ${{ needs.e2e.outputs.status == 'failure' || needs.import.outputs.status == 'failure' || needs.upgrade.outputs.status == 'failure' }}
        run: |
          exit 1

  # Delete any leftover service that might have failed deleting
  cleanup:
    runs-on: ubuntu-latest
    needs: [ "e2e", "import", "upgrade", "token" ]
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get API details for env
        id: credentials
        env:
          api_env: "Production"
          api_env_production: "${{ secrets.API_ENV_PRODUCTION }}"
          api_env_staging: "${{ secrets.API_ENV_STAGING }}"
          api_env_development: "${{ secrets.API_ENV_DEVELOPMENT }}"
        run: |
          bash ./.github/scripts/set_api_env.sh ${{ matrix.cloud_provider }}
      - name: cleanup
        uses: ./.github/actions/cleanup-clickhouse
        with:
          api_url: ${{ steps.credentials.outputs.api_url }}
          organization_id: ${{ steps.credentials.outputs.organization_id }}
          token_key: ${{ steps.credentials.outputs.api_key_id }}
          token_secret: ${{ steps.credentials.outputs.api_key_secret }}
          token: ${{needs.token.outputs.token}}

  # Bump the provider version in the examples directory
  bump-examples:
    needs: [ "validate", "e2e", "import", "upgrade" ]
    if: ${{ needs.e2e.outputs.status != 'failure' && needs.import.outputs.status != 'failure' && needs.upgrade.outputs.status != 'failure' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ssh-key: ${{secrets.DEPLOY_SSH_PRIVATE_KEY }}
      - name: Bump provider version in examples
        id: bump
        if: ${{ needs.validate.outputs.enable_alpha == 'false' }}
        run: |
          version="${{ inputs.version }}"

          # Bump semver in examples
          export CLICKHOUSE_TERRAFORM_PROVIDER_VERSION="$version"
          for f in `find . -name provider.tf.template`
          do
            dst="${f%.template}"
            cat $f | envsubst > $dst

            sed -i '1s/^/# This file is generated automatically please do not edit\n/' $dst
          done

      - name: Build docs for stable release
        if: ${{ needs.validate.outputs.enable_alpha == 'false' }}
        run: |
          make docs

      - name: Build docs for alpha release
        if: ${{ needs.validate.outputs.enable_alpha == 'true' }}
        run: |
          make docs-alpha

      - name: Commit
        run: |
          git diff --quiet --exit-code && (echo "No changes detected" && exit 0)
          git config --global user.name "Release Github Action"
          git config --global user.email "bot@users.noreply.github.com"
          git commit -a -m "Bump provider version in examples to ${{ inputs.version }}"
          git push

  # Create tag for the release
  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    needs: [ "e2e", "import", "upgrade", "bump-examples" ]
    if: ${{ needs.e2e.outputs.status != 'failure' && needs.import.outputs.status != 'failure' && needs.upgrade.outputs.status != 'failure' }}
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: "main"
    - name: Create tag
      run: |
        tag="v${{ inputs.version }}"
        git tag $tag
        git push origin $tag
        
  # Make a new release out of the tag
  goreleaser:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    needs: [ "validate", "tag", "e2e", "import", "upgrade" ]
    if: ${{ needs.e2e.outputs.status != 'failure' && needs.import.outputs.status != 'failure' && needs.upgrade.outputs.status != 'failure' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: v${{inputs.version}}
          # Allow goreleaser to access older tag information.
          fetch-depth: 0

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'
          cache: true

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release --clean --config ${{ needs.validate.outputs.goreleaser_config }}
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
