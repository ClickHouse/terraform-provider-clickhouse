name: Release

on:
  push:
    branches:
      - "main"

defaults:
  run:
    shell: bash

jobs:
  # Make a new tag out of main branch
  # Only runs if latest comming on main is a release commit.
  release-tag:
    permissions:
      contents: write
      pull-requests: write

    outputs:
      version: ${{ steps.check.outputs.release-version }}

    runs-on: [dataplane, self-hosted, linux, x64, small]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check release
        id: check
        run: |
          last_commit_msg="$(git log -1 --pretty=%B|head -n1)"
          
          echo "Last commit msg = '${last_commit_msg}'"
          
          if [[ $last_commit_msg == \[RELEASE* ]]
          then
            version="$(echo "$last_commit_msg" | cut -d"]" -f1 | cut -d" " -f2)"
          else
            echo "Latest commit does not look like a release commit"
            echo "release-version=null" >> $GITHUB_OUTPUT
            exit 0
          fi
                    
          # strip any leading "v" from the release.
          version="${version#v}"
          
          # validate semver.
          if [[ $version =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$ ]]; then
            echo "Preparing release $version"
          else
            echo "Invalid semver $version in branch name"
            exit 1
          fi
          
          echo "release-version=${version}" >> $GITHUB_OUTPUT

      - name: Create tag
        if: ${{ steps.check.outputs.release-version != 'null' }}
        run: |
          tag="v${{ steps.check.outputs.release-version }}"
          git tag $tag
          git push origin $tag

  # Begin e2e tests section
  token:
    needs: [ "release-tag" ]
    if: ${{ needs.release-tag.outputs.version != 'null' }}
    outputs:
      token: ${{ steps.generate.outputs.token }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate
        id: generate
        run: |
          token="$(date '+%s')"
          echo "token=${token}" >> $GITHUB_OUTPUT

  find-tf-releases:
    needs: [ "release-tag" ]
    if: ${{ needs.release-tag.outputs.version != 'null' }}
    outputs:
      releases: ${{ steps.find.outputs.releases }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/find-tf-releases
        id: find

  e2e:
    if: ${{ needs.release-tag.outputs.version != 'null' }}
    needs: [ "token", "find-tf-releases" ]
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      fail-fast: false
      max-parallel: 5
      matrix:
        test: [ "basic" ]
        tf_release: ${{ fromJSON(needs.find-tf-releases.outputs.releases) }}
        cloud_provider: [ "aws", "gcp", "azure" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: "v${{needs.release-tag.outputs.version}}"
      - name: e2e
        uses: ./.github/actions/e2e
        with:
          organization_id: ${{ secrets.TF_VAR_ORGANIZATION_ID }}
          token_key: ${{ secrets.TF_VAR_TOKEN_KEY }}
          token_secret: ${{ secrets.TF_VAR_TOKEN_SECRET }}
          token: ${{needs.token.outputs.token}}
          test_name: ${{ matrix.test }}
          tf_release: ${{ matrix.tf_release }}
          cloud_provider: ${{ matrix.cloud_provider }}

  # Delete any leftover service that might have failed deleting
  cleanup:
    if: ${{ needs.release-tag.outputs.version != 'null' }}
    runs-on: ubuntu-latest
    needs: [ "e2e", "token" ]
    continue-on-error: true
    env:
      organization_id: ${{ secrets.TF_VAR_ORGANIZATION_ID }}
      token_key: ${{ secrets.TF_VAR_TOKEN_KEY }}
      token_secret: ${{ secrets.TF_VAR_TOKEN_SECRET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: cleanup
        uses: ./.github/actions/cleanup
        with:
          organization_id: ${{ secrets.TF_VAR_ORGANIZATION_ID }}
          token_key: ${{ secrets.TF_VAR_TOKEN_KEY }}
          token_secret: ${{ secrets.TF_VAR_TOKEN_SECRET }}
          token: ${{needs.token.outputs.token}}
  # End e2e tests section

  # Make a new release out of the tag
  goreleaser:
    runs-on: ubuntu-latest
    needs: [ "release-tag", "e2e" ]
    if: ${{ needs.release-tag.outputs.version != 'null' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{needs.release-tag.outputs.version}}

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.5"
          cache: true

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release --clean
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
