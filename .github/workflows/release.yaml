name: Release

on:
  push:
    branches:
      - "main"

defaults:
  run:
    shell: bash

jobs:
  release-tag:
    permissions:
      contents: write
      pull-requests: write

    outputs:
      version: ${{ steps.check.outputs.release-version }}

    runs-on: [dataplane, self-hosted, linux, x64, small]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check release
        id: check
        run: |
          last_commit_msg="$(git log -1 --pretty=%B|head -n1)"
          
          echo "Last commit msg = '${last_commit_msg}'"
          
          if [[ $last_commit_msg == \[RELEASE* ]]
          then
            version="$(echo "$last_commit_msg" | cut -d"]" -f1 | cut -d" " -f2)"
          else
            echo "Latest commit does not look like a release commit"
            echo "release-version=null" >> $GITHUB_OUTPUT
            exit 0
          fi
                    
          # strip any leading "v" from the release.
          version="${version#v}"
          
          # validate semver.
          if [[ $version =~ ^(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)(-((0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9][0-9]*|[0-9]*[a-zA-Z-][0-9a-zA-Z-]*))*))?(\+([0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*))?$ ]]; then
            echo "Preparing release $version"
          else
            echo "Invalid semver $version in branch name"
            exit 1
          fi
          
          echo "release-version=${version}" >> $GITHUB_OUTPUT

      - name: Create tag
        if: ${{ steps.check.outputs.release-version != 'null' }}
        run: |
          tag="v${{ steps.check.outputs.release-version }}"
          git tag $tag
          git push origin $tag

  goreleaser:
    runs-on: ubuntu-latest
    needs: [ "release-tag" ]
    if: ${{ needs.release-tag.outputs.version != 'null' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{needs.release-tag.outputs.version}}

      - name: Setup go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.5"
          cache: true

      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}

      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          args: release --clean
        env:
          # GitHub sets the GITHUB_TOKEN secret automatically.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
