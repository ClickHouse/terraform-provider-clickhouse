name: E2E tests

on:
  workflow_dispatch:
    inputs:
      api_env:
        type: choice
        default: Production
        options:
          - Production
          - Staging
          - Development
          - Custom
        description: What API ENV to use as backend.
      api_url:
        type: string
        default: ""
        description: (Optional) Full URL of the API service to use when API Env is 'Custom'
      organization_id:
        type: string
        default: ""
        description: (Optional) Organization ID to use when API Env is 'Custom'
      api_key_id:
        type: string
        default: ""
        description: (Optional) API Key ID to use when API Env is 'Custom'
      api_key_secret:
        type: string
        default: ""
        description: (Optional) API Key secret to use when API Env is 'Custom'
      aws_region:
        type: string
        default: ""
        description: (Optional) AWS region to run tests in when API Env is 'Custom'
      azure_region:
        type: string
        default: ""
        description: (Optional) Azure region to run tests in when API Env is 'Custom'
      gcp_region:
        type: string
        default: ""
        description: (Optional) GCP region to run tests in when API Env is 'Custom'
      run_upgrade_test:
        type: boolean
        default: false
        description: If checked, additionally create service using latest stable version, then upgrade to the current version
      upgrade_from:
        type: string
        default: ""
        description: What version to test upgrade from. Including leading 'v'. Example 'v2.3.0'. Defaults to latest stable release.
  schedule:
    - cron: "0 7 * * *"

defaults:
  run:
    shell: bash

jobs:
  # Generate a random token to tag the tests with
  token:
    outputs:
      token: ${{ steps.generate_token.outputs.token }}
    runs-on: k8s-nano
    steps:
      - name: Generate token
        id: generate_token
        run: |
          # Number of seconds since January first 2025.
          token=$(( $(date +%s) - $(date -d "Jan 1, 2025 00:00:00" +%s) ))
          echo "token=${token}"
          echo "token=${token}" >> "${GITHUB_OUTPUT}"

  # Find the most recent release of terraform CLI
  find-tf-releases:
    outputs:
      releases: ${{ steps.find.outputs.releases }}
    runs-on: k8s-nano
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find TF releases
        uses: ./.github/actions/find-tf-releases
        id: find
        with:
          count: '3'

  list-examples:
    outputs:
      examples: ${{ steps.list.outputs.examples }}
    runs-on: k8s-nano
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: List Examples
        uses: ./.github/actions/list-examples
        id: list
        with:
          ignore: pci

  # Run e2e tests
  e2e:
    outputs:
      status: ${{ steps.status.outputs.status }}
    needs: [ "token", "find-tf-releases", "list-examples" ]
    runs-on: k8s-large
    environment: default
    continue-on-error: true
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        tf_release: ${{ fromJSON(needs.find-tf-releases.outputs.releases) }}
        test: ${{ fromJSON(needs.list-examples.outputs.examples) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate service name
        uses: ./.github/actions/generate-service-name
        id: service_name
        with:
          test_type: e2e
          test_name: ${{ matrix.test.name }}
          tf_release: ${{ matrix.tf_release }}
          cloud_provider: ${{ matrix.test.cloud }}
          token: ${{ needs.token.outputs.token }}

      - name: Get API details for env
        id: credentials
        env:
          api_env: "${{ inputs.api_env }}"
          api_env_production: "${{ secrets.API_ENV_PRODUCTION }}"
          api_env_staging: "${{ secrets.API_ENV_STAGING }}"
          api_env_development: "${{ secrets.API_ENV_DEVELOPMENT }}"
          api_url: "${{ inputs.api_url }}"
          organization_id: "${{ inputs.organization_id }}"
          api_key_id: "${{ inputs.api_key_id }}"
          api_key_secret: "${{ inputs.api_key_secret }}"
          aws_region: "${{ inputs.aws_region }}"
          azure_region: "${{ inputs.azure_region }}"
          gcp_region: "${{ inputs.gcp_region }}"
        run: |
          bash ./.github/scripts/set_api_env.sh ${{ matrix.test.cloud }}

      - name: E2E
        id: e2e
        uses: ./.github/actions/e2e
        with:
          api_url: ${{ steps.credentials.outputs.api_url }}
          organization_id: ${{ steps.credentials.outputs.organization_id }}
          token_key: ${{ steps.credentials.outputs.api_key_id }}
          token_secret: ${{ steps.credentials.outputs.api_key_secret }}
          service_name: ${{steps.service_name.outputs.service_name}}
          test_name: ${{ matrix.test.name }}
          tf_release: ${{ matrix.tf_release }}
          cloud_provider: ${{ matrix.test.cloud }}
          upgrade_test: "false"
          skip_build: "false"
          region: ${{ contains(fromJSON('["hipaa", "pci"]'), matrix.test.name) && steps.credentials.outputs.compliance_region || steps.credentials.outputs.region }}
          aws_role_arn: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Cleanup Cloud
        if: always()
        uses: ./.github/actions/cleanup-cloud
        with:
          cloud_provider: ${{ matrix.test.cloud }}
          service_name: ${{steps.service_name.outputs.service_name}}
          aws_region: ${{ steps.credentials.outputs.region }}
          aws_role_arn: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Mark error
        id: status
        if: failure()
        run: |
          echo "status=failure" >> "${GITHUB_OUTPUT}"
          exit 1

  upgrade:
    outputs:
      status: ${{ steps.status.outputs.status }}
    needs: [ "token", "find-tf-releases", "list-examples" ]
    runs-on: k8s-large
    continue-on-error: true
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        tf_release: ${{ fromJSON(needs.find-tf-releases.outputs.releases) }}
        test: ${{ fromJSON(needs.list-examples.outputs.examples) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate service name
        uses: ./.github/actions/generate-service-name
        id: service_name
        with:
          test_type: upg
          test_name: ${{ matrix.test.name }}
          tf_release: ${{ matrix.tf_release }}
          cloud_provider: ${{ matrix.test.cloud }}
          token: ${{ needs.token.outputs.token }}

      - name: Get API details for env
        id: credentials
        env:
          api_env: "${{ inputs.api_env }}"
          api_env_production: "${{ secrets.API_ENV_PRODUCTION }}"
          api_env_staging: "${{ secrets.API_ENV_STAGING }}"
          api_env_development: "${{ secrets.API_ENV_DEVELOPMENT }}"
          api_url: "${{ inputs.api_url }}"
          organization_id: "${{ inputs.organization_id }}"
          api_key_id: "${{ inputs.api_key_id }}"
          api_key_secret: "${{ inputs.api_key_secret }}"
          aws_region: "${{ inputs.aws_region }}"
          azure_region: "${{ inputs.azure_region }}"
          gcp_region: "${{ inputs.gcp_region }}"
        run: |
          bash ./.github/scripts/set_api_env.sh ${{ matrix.test.cloud }}

      - name: Upgrade
        if: ${{ inputs.run_upgrade_test }}
        id: upgrade
        uses: ./.github/actions/e2e
        with:
          api_url: ${{ steps.credentials.outputs.api_url }}
          organization_id: ${{ steps.credentials.outputs.organization_id }}
          token_key: ${{ steps.credentials.outputs.api_key_id }}
          token_secret: ${{ steps.credentials.outputs.api_key_secret }}
          service_name: ${{steps.service_name.outputs.service_name}}
          test_name: ${{ matrix.test.name }}
          tf_release: ${{ matrix.tf_release }}
          cloud_provider: ${{ matrix.test.cloud }}
          upgrade_test: "true"
          upgrade_from: ${{ inputs.upgrade_from }}
          skip_build: "false"
          region: ${{ contains(fromJSON('["hipaa", "pci"]'), matrix.test.name) && steps.credentials.outputs.compliance_region || steps.credentials.outputs.region }}
          aws_role_arn: ${{ secrets.AWS_ASSUME_ROLE_ARN }}

      - name: Cleanup Cloud
        if: always()
        uses: ./.github/actions/cleanup-cloud
        with:
          cloud_provider: ${{ matrix.test.cloud }}
          service_name: ${{steps.service_name.outputs.service_name}}
          aws_region: ${{ steps.credentials.outputs.region }}
          aws_role_arn: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
          azure_client_id: ${{ secrets.AZURE_CLIENT_ID }}
          azure_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          azure_subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Mark error
        id: status
        if: failure()
        run: |
          echo "status=failure" >> "${GITHUB_OUTPUT}"
          exit 1

  report:
    runs-on: k8s-nano
    needs: [ "e2e", "upgrade" ]
    if: ${{ github.ref_name == 'main' && (needs.e2e.outputs.status == 'failure' || needs.upgrade.outputs.status == 'failure') }}
    steps:
      - name: Report Failure on slack
        if: ${{ github.ref_name == 'main' && (needs.e2e.outputs.status == 'failure' || needs.upgrade.outputs.status == 'failure') }}
        uses: ravsamhq/notify-slack-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          status: 'failure'
          notification_title: "E2E tests failed for {branch}"
          mention_groups: "S099W77RQ7J" # @on-call-terraform-provider
          mention_groups_when: "failure"
          footer: "{run_url}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      - name: Report error on github UI
        run: |
          if [ "${{ needs.e2e.outputs.status }}" == 'failure' || needs.upgrade.outputs.status == 'failure' ]
          then
            exit 1
          fi

  # Delete any leftover service that might have failed deleting
  cleanup:
    runs-on: k8s-small
    needs: [ "e2e", "upgrade", "token" ]
    if: always()
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get API details for env
        id: credentials
        env:
          api_env: "${{ inputs.api_env }}"
          api_env_production: "${{ secrets.API_ENV_PRODUCTION }}"
          api_env_staging: "${{ secrets.API_ENV_STAGING }}"
          api_env_development: "${{ secrets.API_ENV_DEVELOPMENT }}"
          api_url: "${{ inputs.api_url }}"
          organization_id: "${{ inputs.organization_id }}"
          api_key_id: "${{ inputs.api_key_id }}"
          api_key_secret: "${{ inputs.api_key_secret }}"
          aws_region: "${{ inputs.aws_region }}"
          azure_region: "${{ inputs.azure_region }}"
          gcp_region: "${{ inputs.gcp_region }}"
        run: |
          bash ./.github/scripts/set_api_env.sh
      - name: Cleanup ClickHouse
        uses: ./.github/actions/cleanup-clickhouse
        with:
          api_url: ${{ steps.credentials.outputs.api_url }}
          organization_id: ${{ steps.credentials.outputs.organization_id }}
          token_key: ${{ steps.credentials.outputs.api_key_id }}
          token_secret: ${{ steps.credentials.outputs.api_key_secret }}
          token: ${{needs.token.outputs.token}}
