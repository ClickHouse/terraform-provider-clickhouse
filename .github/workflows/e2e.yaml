name: E2E tests

on:
  workflow_dispatch:
    inputs:
      notify_errors:
        type: boolean
        default: false
        description: "If checked, send any errors in e2e tests to the #proj-api-terraform slack channel"
      skip_build_from_branch:
        type: boolean
        default: false
        description: "If checked, the latest stable release of the clickhouse terraform plugin is used for the tests"
      run_upgrade_test:
        type: boolean
        default: false
        description: "Create service using latest stable version, then upgrade to the current version"
  schedule:
    - cron: "0 3 * * *"

defaults:
  run:
    shell: bash

jobs:
  # Generate a random token to tag the tests with
  token:
    outputs:
      token: ${{ steps.generate.outputs.token }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate
        id: generate
        run: |
          token="$(date '+%s')"
          echo "token=${token}" >> $GITHUB_OUTPUT

  # Find the 3 most recent releases of terraform CLI (one for each minor)
  find-tf-releases:
    outputs:
      releases: ${{ steps.find.outputs.releases }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/find-tf-releases
        id: find

  list-examples:
    outputs:
      examples: ${{ steps.list.outputs.examples }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: List examples
        id: list
        run: |
          examples="$(echo '[]' | jq .)"
          pushd examples/full
          idx=0
          for candidate in $(ls -1 .)
          do
            if [ -d $candidate ]
            then
              cloud_providers=()
              pushd $candidate
              for cloud in $(ls -1 .)
              do
                if [ -d $cloud ]
                then
                  cloud_providers+=(${cloud})        
                fi
              done
              popd
              json="$(printf '%s\n' "${cloud_providers[@]}" | jq -R . | jq -cs .)"
              examples="$(echo "$examples" | jq --argjson idx $idx --arg name "$candidate" '.[$idx].name |= $name' | jq --argjson idx $idx --argjson clouds "$json" '.[$idx].cloud |= $clouds')"
              idx=$((idx + 1))
            fi
          done
          popd
          echo "examples=${examples}" >> "$GITHUB_OUTPUT"

  # Run e2e tests
  e2e:
    outputs:
      status: ${{ steps.status.outputs.status }}
    needs: [ "token", "find-tf-releases", "list-examples" ]
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        tf_release: ${{ fromJSON(needs.find-tf-releases.outputs.releases) }}
        test: ${{ fromJSON(needs.list-examples.outputs.examples) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate test name
        id: name
        run: |
          test_type=""
          if [ "${{inputs.run_upgrade_test}}" == "true" ]
          then
            test_type=" upgrade"
          fi
          
          echo "test_name=[e2e${test_type}]-${{ matrix.test.name }}-${{ matrix.tf_release }}-${{ matrix.test.cloud }}-${{ needs.token.outputs.token }}" >> $GITHUB_OUTPUT
      - name: Pick a cloud region
        id: region
        run: |
          cloud="${{ matrix.test.cloud }}"
          regions=()
          case $cloud in
          aws)
            regions+=('us-west-2')
            regions+=('us-east-2')
            regions+=('us-east-1')
            regions+=('eu-west-1')
            regions+=('eu-west-2')
            regions+=('eu-central-1')
            regions+=('ap-southeast-1')
            regions+=('ap-southeast-2')
            regions+=('ap-northeast-1')
            regions+=('ap-south-1')
            ;;
          azure)
            regions+=('germanywestcentral')
            regions+=('eastus2')
            regions+=('westus3')
            ;;
          gcp)
            regions+=('us-east1')
            regions+=('us-central1')
            regions+=('europe-west4')
            regions+=('asia-southeast1')
            ;;
          esac
          
          random=${regions[ $RANDOM % ${#regions[@]} ]}
          echo "Lucky winner region is: $random"
          echo "region=$random" >> $GITHUB_OUTPUT
      - name: e2e
        uses: ./.github/actions/e2e
        with:
          organization_id: ${{ secrets.TF_VAR_ORGANIZATION_ID }}
          token_key: ${{ secrets.TF_VAR_TOKEN_KEY }}
          token_secret: ${{ secrets.TF_VAR_TOKEN_SECRET }}
          service_name: ${{steps.name.outputs.test_name}}
          test_name: ${{ matrix.test.name }}
          tf_release: ${{ matrix.tf_release }}
          cloud_provider: ${{ matrix.test.cloud }}
          upgrade_test: ${{ inputs.run_upgrade_test }}
          skip_build: "${{ !contains(inputs.skip_build_from_branch, 'false') }}"
          region: ${{steps.region.outputs.region}}
          aws_role_arn: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
      - name: cleanup
        if: ${{ always() && matrix.test.cloud == 'aws' && matrix.test.name == 'private_endpoint' }}
        uses: ./.github/actions/cleanup-aws
        with:
          service_name: ${{steps.name.outputs.test_name}}
          aws_region: ${{steps.region.outputs.region}}
          aws_role_arn: ${{ secrets.AWS_ASSUME_ROLE_ARN }}
      - name: Mark error
        id: status
        if: failure()
        run: |
          echo "status=failure" >> $GITHUB_OUTPUT

  report:
    runs-on: ubuntu-latest
    needs: [ "e2e" ]
    if: ${{ needs.e2e.outputs.status == 'failure' }}
    steps:
      - name: Report Failure on slack
        if: ${{ needs.e2e.outputs.status == 'failure' && !contains(inputs.notify_errors, 'false') }}
        uses: ravsamhq/notify-slack-action@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          status: 'failure'
          notification_title: "E2E tests failed for {branch}"
          footer: "{run_url}"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      - name: Report error on github UI
        run: |
          if [ "${{ needs.e2e.outputs.status }}" == 'failure' ]
          then
            exit 1
          fi

  # Delete any leftover service that might have failed deleting
  cleanup:
    runs-on: ubuntu-latest
    needs: [ "e2e", "token" ]
    if: always()
    continue-on-error: true
    env:
      organization_id: ${{ secrets.TF_VAR_ORGANIZATION_ID }}
      token_key: ${{ secrets.TF_VAR_TOKEN_KEY }}
      token_secret: ${{ secrets.TF_VAR_TOKEN_SECRET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: cleanup
        uses: ./.github/actions/cleanup-clickhouse
        with:
          organization_id: ${{ secrets.TF_VAR_ORGANIZATION_ID }}
          token_key: ${{ secrets.TF_VAR_TOKEN_KEY }}
          token_secret: ${{ secrets.TF_VAR_TOKEN_SECRET }}
          token: ${{needs.token.outputs.token}}
