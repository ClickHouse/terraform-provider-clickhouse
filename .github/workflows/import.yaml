name: Test import

on:
  workflow_dispatch:
    inputs:
      api_url:
        type: string
        default: ""
        description: "Full URL of the API service to use. Defaults to the production API endpoint https://api.clickhouse.cloud/v1"

defaults:
  run:
    shell: bash

jobs:
  # Generate a random token to tag the tests with
  token:
    outputs:
      token: ${{ steps.generate.outputs.token }}
    runs-on: ubuntu-latest
    steps:
      - name: Generate
        id: generate
        run: |
          token="$(date '+%s')"
          echo "token=${token}" >> $GITHUB_OUTPUT

  # Find the most recent releases of terraform CLI
  find-tf-releases:
    outputs:
      releases: ${{ steps.find.outputs.releases }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - uses: ./.github/actions/find-tf-releases
        id: find
        with:
          count: '1'

  # Run import tests
  import:
    outputs:
      status: ${{ steps.status.outputs.status }}
    needs: [ "token", "find-tf-releases" ]
    runs-on: ubuntu-latest
    continue-on-error: true
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        tf_release: ${{ fromJSON(needs.find-tf-releases.outputs.releases) }}
        cloud_provider: [ "aws", "azure", "gcp" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Pick a cloud region
        id: region
        run: |
          cloud="${{ matrix.cloud_provider }}"
          regions=()
          case $cloud in
          aws)
            regions+=('us-west-2')
            regions+=('us-east-2')
            regions+=('us-east-1')
            regions+=('eu-west-1')
            regions+=('eu-west-2')
            regions+=('eu-central-1')
            regions+=('ap-southeast-1')
            regions+=('ap-southeast-2')
            regions+=('ap-south-1')
            regions+=('ap-northeast-1')
            ;;
          azure)
            regions+=('germanywestcentral')
            regions+=('eastus2')
            regions+=('westus3')
            ;;
          gcp)
            regions+=('us-east1')
            regions+=('us-central1')
            regions+=('europe-west4')
            regions+=('asia-southeast1')
            ;;
          esac
          
          random=${regions[ $RANDOM % ${#regions[@]} ]}
          echo "Lucky winner region is: $random"
          echo "region=$random" >> $GITHUB_OUTPUT

      - name: import
        id: import
        uses: ./.github/actions/import
        with:
          api_url: ${{ inputs.api_url }}
          organization_id: ${{ secrets.TF_VAR_ORGANIZATION_ID }}
          token_key: ${{ secrets.TF_VAR_TOKEN_KEY }}
          token_secret: ${{ secrets.TF_VAR_TOKEN_SECRET }}
          resource_name: "[import]-${{ matrix.tf_release }}-${{ matrix.cloud_provider }}-${{ needs.token.outputs.token }}"
          tf_release: ${{ matrix.tf_release }}
          cloud_provider: ${{ matrix.cloud_provider }}
          region: ${{ steps.region.outputs.region }}

      - name: Mark error
        id: status
        if: failure()
        run: |
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1

  report:
    runs-on: ubuntu-latest
    needs: [ "import" ]
    if: ${{ needs.import.outputs.status == 'failure' }}
    steps:
      - name: Report error on github UI
        run: |
          if [ "${{ needs.import.outputs.status }}" == 'failure' ]
          then
            exit 1
          fi

  # Delete any leftover service that might have failed deleting
  cleanup:
    runs-on: ubuntu-latest
    needs: [ "import", "token" ]
    if: always()
    continue-on-error: true
    env:
      organization_id: ${{ secrets.TF_VAR_ORGANIZATION_ID }}
      token_key: ${{ secrets.TF_VAR_TOKEN_KEY }}
      token_secret: ${{ secrets.TF_VAR_TOKEN_SECRET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: cleanup
        uses: ./.github/actions/cleanup-clickhouse
        with:
          organization_id: ${{ secrets.TF_VAR_ORGANIZATION_ID }}
          token_key: ${{ secrets.TF_VAR_TOKEN_KEY }}
          token_secret: ${{ secrets.TF_VAR_TOKEN_SECRET }}
          token: ${{needs.token.outputs.token}}
