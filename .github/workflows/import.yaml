name: Test import

on:
  workflow_dispatch:
    inputs:
      api_env:
        type: choice
        default: Production
        options:
          - Production
          - Staging
          - Development
          - Custom
        description: What API ENV to use as backend.
      api_url:
        type: string
        default: ""
        description: (Optional) Full URL of the API service to use when API Env is 'Custom'
      organization_id:
        type: string
        default: ""
        description: (Optional) Organization ID to use when API Env is 'Custom'
      api_key_id:
        type: string
        default: ""
        description: (Optional) API Key ID to use when API Env is 'Custom'
      api_key_secret:
        type: string
        default: ""
        description: (Optional) API Key secret to use when API Env is 'Custom'

defaults:
  run:
    shell: bash

jobs:
  # Generate a random token to tag the tests with
  token:
    outputs:
      token: ${{ steps.generate.outputs.token }}
    runs-on: k8s-nano
    steps:
      - name: Generate
        id: generate
        run: |
          token="$(date '+%s')"
          echo "token=${token}" >> $GITHUB_OUTPUT

  # Find the most recent releases of terraform CLI
  find-tf-releases:
    outputs:
      releases: ${{ steps.find.outputs.releases }}
    runs-on: k8s-nano
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Find TF releases
        uses: ./.github/actions/find-tf-releases
        id: find
        with:
          count: '1'

  # Run import tests
  import:
    outputs:
      status: ${{ steps.status.outputs.status }}
    needs: [ "token", "find-tf-releases" ]
    runs-on: k8s-medium
    continue-on-error: true
    permissions:
      id-token: write
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        tf_release: ${{ fromJSON(needs.find-tf-releases.outputs.releases) }}
        cloud_provider: [ "aws", "azure", "gcp" ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get API details for env
        id: credentials
        env:
          api_env: "${{ inputs.api_env }}"
          api_env_production: "${{ secrets.API_ENV_PRODUCTION }}"
          api_env_staging: "${{ secrets.API_ENV_STAGING }}"
          api_env_development: "${{ secrets.API_ENV_DEVELOPMENT }}"
          api_url: "${{ inputs.api_url }}"
          organization_id: "${{ inputs.organization_id }}"
          api_key_id: "${{ inputs.api_key_id }}"
          api_key_secret: "${{ inputs.api_key_secret }}"
        run: |
          bash ./.github/scripts/set_api_env.sh ${{ matrix.cloud_provider }}

      - name: Import
        id: import
        uses: ./.github/actions/import
        with:
          api_url: ${{ steps.credentials.outputs.api_url }}
          organization_id: ${{ steps.credentials.outputs.organization_id }}
          token_key: ${{ steps.credentials.outputs.api_key_id }}
          token_secret: ${{ steps.credentials.outputs.api_key_secret }}
          resource_name: "[import]-${{ matrix.tf_release }}-${{ matrix.cloud_provider }}-${{ needs.token.outputs.token }}"
          tf_release: ${{ matrix.tf_release }}
          cloud_provider: ${{ matrix.cloud_provider }}
          region: ${{ steps.credentials.outputs.region }}

      - name: Mark error
        id: status
        if: failure()
        run: |
          echo "status=failure" >> $GITHUB_OUTPUT
          exit 1

  report:
    runs-on: k8s-nano
    needs: [ "import" ]
    if: ${{ needs.import.outputs.status == 'failure' }}
    steps:
      - name: Report error on github UI
        run: |
          if [ "${{ needs.import.outputs.status }}" == 'failure' ]
          then
            exit 1
          fi

  # Delete any leftover service that might have failed deleting
  cleanup:
    runs-on: k8s-small
    needs: [ "import", "token" ]
    if: always()
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get API details for env
        id: credentials
        env:
          api_env: "${{ inputs.api_env }}"
          api_env_production: "${{ secrets.API_ENV_PRODUCTION }}"
          api_env_staging: "${{ secrets.API_ENV_STAGING }}"
          api_env_development: "${{ secrets.API_ENV_DEVELOPMENT }}"
          api_url: "${{ inputs.api_url }}"
          organization_id: "${{ inputs.organization_id }}"
          api_key_id: "${{ inputs.api_key_id }}"
          api_key_secret: "${{ inputs.api_key_secret }}"
        run: |
          bash ./.github/scripts/set_api_env.sh
      - name: Cleanup ClickHouse
        uses: ./.github/actions/cleanup-clickhouse
        with:
          api_url: ${{ steps.credentials.outputs.api_url }}
          organization_id: ${{ steps.credentials.outputs.organization_id }}
          token_key: ${{ steps.credentials.outputs.api_key_id }}
          token_secret: ${{ steps.credentials.outputs.api_key_secret }}
          token: ${{needs.token.outputs.token}}
