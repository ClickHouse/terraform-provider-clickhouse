name: "Run e2e tests"
description: "Run end to end tests for terraform provider"
inputs:
  organization_id:
    required: true
    description: "The clickhouse organization ID"
  token_key:
    required: true
    description: "The clickhouse token key"
  token_secret:
    required: true
    description: "The clickhouse token secret"
  token:
    required: true
    description: "The unique token assigned to this e2e run"
  test_name:
    required: true
    description: "The test name i.e. the name of the folder inside the examples dir"
  tf_release:
    required: true
    description: "The terraform cli version"
  cloud_provider:
    required: true
    description: "The cloud provider name"
  upgrade_test:
    required: false
    default: "false"
    description: "If true it runs a provider upgrade test"

runs:
  using: "composite"
  steps:
    - name: Setup go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Install terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.tf_release }}
        terraform_wrapper: false

    - shell: bash
      name: Show terraform version
      run: terraform version

    - shell: bash
      name: Set env variables
      run: |
        echo "::group::Setting env variables"
        test_type=""
        if [ "${{inputs.upgrade_test}}" == "true" ]
        then
          test_type=" upgrade"
        fi
        service_name="[e2e${test_type}]-${{ inputs.test_name }}-${{ inputs.tf_release }}-${{ inputs.cloud_provider }}-${{ inputs.token }}"
        
        echo "TF_VAR_organization_id=${{ inputs.organization_id }}" >> $GITHUB_ENV
        echo "TF_VAR_token_key=${{ inputs.token_key }}" >> $GITHUB_ENV
        echo "TF_VAR_token_secret=${{ inputs.token_secret }}" >> $GITHUB_ENV
        echo "TF_VAR_service_name=${service_name}" >> $GITHUB_ENV
        echo "TF_VAR_cloud_provider=${{ inputs.cloud_provider }}" >> $GITHUB_ENV
        echo "::endgroup::"

    - shell: bash
      if: ${{ inputs.upgrade_test == 'true' }}
      name: Upgrade test - Run terraform using latest stable version
      run: |
        echo "::group::Run terraform using latest stable version"
        cd "examples/${{ inputs.test_name }}"
        terraform init -input=false
        terraform plan -no-color
        terraform apply -no-color -auto-approve
        echo "::endgroup::"

    - shell: bash
      name: Build provider from branch and create terraformrc to use it
      run: |
        echo "::group::Build provider from branch and create terraformrc to use it"
        go get
        go build -o terraform-provider-clickhouse

        cat <<EOF >$HOME/.terraformrc
        provider_installation {
          dev_overrides {
            "ClickHouse/clickhouse" = "$(pwd)"
          }
          direct {}
        }
        EOF
        echo "::endgroup::"

    - shell: bash
      name: Run terraform using current branch version
      run: |
        echo "::group::Run terraform using current branch version"
        cd "examples/${{ inputs.test_name }}"
        terraform init -input=false -upgrade
        terraform plan -no-color
        terraform apply -no-color -auto-approve
        echo "::endgroup::"

    - shell: bash
      name: Terraform destroy
      if: always()
      run: |
        echo "::group::Run terraform destroy"
        cd "examples/${{ inputs.test_name }}"
        terraform destroy -no-color -auto-approve
        echo "::endgroup::"
