name: "Run e2e tests"
description: "Run end to end tests for terraform provider"
inputs:
  organization_id:
    required: true
    description: "The clickhouse organization ID"
  token_key:
    required: true
    description: "The clickhouse token key"
  token_secret:
    required: true
    description: "The clickhouse token secret"
  service_name:
    required: true
    description: "The unique name assigned to this test"
  test_name:
    required: true
    description: "The test name i.e. the name of the folder inside the examples dir"
  tf_release:
    required: true
    description: "The terraform cli version"
  cloud_provider:
    required: true
    description: "The cloud provider name"
  upgrade_test:
    required: false
    default: "false"
    description: "If true it runs a provider upgrade test"
  skip_build:
    required: false
    default: "false"
    description: "If true it runs tests out of last published terraform provider release"
  aws_role_arn:
    required: true
    description: "The ARN of the AWS role to assume for AWS tests"
  aws_region:
    required: true
    description: "The AWS region to use for AWS tests"
runs:
  using: "composite"
  steps:
    - shell: bash
      id: defined
      name: Check if test is defined for cloud provider
      run: |
        if [ -d "examples/full/${{ inputs.test_name }}/${{ inputs.cloud_provider }}" ]
        then
          echo "defined=true" >> "$GITHUB_OUTPUT"
        else
          echo "Test ${{ inputs.test_name }} is not available for ${{ inputs.cloud_provider }}"
        fi

    - name: Setup go
      uses: actions/setup-go@v5
      if: ${{steps.defined.outputs.defined == 'true' }}
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Install terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.tf_release }}
        terraform_wrapper: false

    - shell: bash
      if: ${{steps.defined.outputs.defined == 'true' }}
      name: Show terraform version
      run: terraform version

    - name: Configure AWS credentials
      id: aws-auth
      uses: aws-actions/configure-aws-credentials@v4
      if: ${{ inputs.cloud_provider == 'aws' }}
      with:
        role-to-assume: ${{ inputs.aws_role_arn }}
        aws-region: ${{ inputs.aws_region }}
        output-credentials: true

    - shell: bash
      if: ${{steps.defined.outputs.defined == 'true' }}
      name: Set env variables
      run: |
        echo "::group::Setting env variables"
        
        cat <<EOF >examples/full/${{ inputs.test_name }}/${{ inputs.cloud_provider }}/variables.tfvars
        organization_id = "${{ inputs.organization_id }}"
        token_key       = "${{ inputs.token_key }}"
        token_secret    = "${{ inputs.token_secret }}"
        service_name    = "${{ inputs.service_name }}"
        EOF
        
        if [ "${{ inputs.cloud_provider }}" == "aws" ]
        then
          aws sts get-caller-identity
        
          cat <<EOF >>examples/full/${{ inputs.test_name }}/${{ inputs.cloud_provider }}/variables.tfvars
        aws_region        = "${{ inputs.aws_region }}"
        aws_key           = "${{ steps.aws-auth.outputs.aws-access-key-id }}"
        aws_secret        = "${{ steps.aws-auth.outputs.aws-secret-access-key }}"
        aws_session_token = "${{ steps.aws-auth.outputs.aws-session-token }}"
        EOF
        fi
          
        echo "::endgroup::"

    - shell: bash
      if: ${{ inputs.upgrade_test == 'true' && steps.defined.outputs.defined == 'true' }}
      name: Upgrade test - Run terraform using latest stable version
      run: |
        echo "::group::Run terraform using latest stable version"
        cd "examples/full/${{ inputs.test_name }}/${{ inputs.cloud_provider }}"
        terraform init -input=false
        terraform plan -no-color -var-file=variables.tfvars
        terraform apply -no-color -auto-approve -var-file=variables.tfvars
        echo "::endgroup::"

    - shell: bash
      if: ${{ inputs.skip_build == 'false' && steps.defined.outputs.defined == 'true' }}
      name: Build provider from branch and create terraformrc to use it
      run: |
        echo "::group::Build provider from branch and create terraformrc to use it"
        go get
        go build -o terraform-provider-clickhouse

        cat <<EOF >$HOME/.terraformrc
        provider_installation {
          dev_overrides {
            "ClickHouse/clickhouse" = "$(pwd)"
          }
          direct {}
        }
        EOF
        echo "::endgroup::"

    - shell: bash
      if: ${{steps.defined.outputs.defined == 'true' }}
      name: Run terraform
      run: |
        echo "::group::Run terraform"
        cd "examples/full/${{ inputs.test_name }}/${{ inputs.cloud_provider }}"
                
        terraform init -input=false -upgrade
        terraform plan -no-color -var-file=variables.tfvars
        terraform apply -no-color -auto-approve -var-file=variables.tfvars
        terraform refresh -no-color -var-file=variables.tfvars
        echo "::endgroup::"

    - shell: bash
      name: Terraform destroy
      if: ${{steps.defined.outputs.defined == 'true' }}
      run: |
        echo "::group::Run terraform destroy"
        cd "examples/full/${{ inputs.test_name }}/${{ inputs.cloud_provider }}"
        terraform destroy -no-color -auto-approve -var-file=variables.tfvars
        echo "::endgroup::"
