name: "Find terraform releases"
description: "Return names of latest terraform cli releases"
inputs:
  count:
    required: false
    default: "3"
    description: "The number of releases to return"

outputs:
  releases:
    description: "The json encoded array of release names"
    value: ${{steps.find-tf-releases.outputs.releases}}

runs:
  using: "composite"
  steps:
    - shell: bash
      id: find-tf-releases
      run: |
        all="$(curl -s -L -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/hashicorp/terraform/releases?per_page=100| jq -r '.[]|.name'|sort -V -r)"
        
        want=${{inputs.count}}
        
        versions=()
        current_nopatch=""
        for candidate in $all
        do
          # only keep final releases such as x.y.z 
          if [[ $candidate =~ ^v?(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)\.(0|[1-9][0-9]*)$ ]]; then          
            candidate=${candidate#v}
      
            # Keep major.minor for each release to check if it changes since last iteration 
            nopatch="$(echo "$candidate" | cut -d "." -f1).$(echo "$candidate" | cut -d "." -f2)"
      
            if [ "$nopatch" != "${current_nopatch}" ]; then
              # First time we see this major.minor, this is a good candidate
              versions+=(${candidate})
              current_nopatch=${nopatch}
            fi
          fi
          [ ${#versions[@]} -ge $want ] && break
        done
      
        json="$(printf '%s\n' "${versions[@]}" | jq -R . | jq -cs .)"
        echo "releases=${json}" >> "$GITHUB_OUTPUT"
